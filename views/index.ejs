<!DOCTYPE html>
<meta charset="utf-8" />
<title>WebSocket Test</title>
    <script type="text/javascript" src = "/javascripts/jquery.js"></script>
    <script language="javascript" type="text/javascript">
        var Uri = '/getTucao';
        // var wsUri = 'ws:' + window.location.href.substring(window.location.protocol.length);
        var timeStamp = '';
        var output;
        function init() {
            output = document.getElementById("output");
            console.log(Uri);
            getTucaoList();
            setInterval(getTucaoList, 2000);
            // createWebSocket();
        }
        function getTucaoList(){
            $.post(Uri, {timeStamp: timeStamp}, function(data){
                console.log(data);
                var list = JSON.parse(data);
                var len = list.length;
                for(var i = 0; i < len; i++){
                    writeToScreen(list[i].timeStamp + '  ' + list[i].Content, 'rgb(0,0,0)');
                }
                if(len > 0){
                    timeStamp = list[len-1].timeStamp;
                }
            });            
        }
        function createWebSocket() {
            websocket = new WebSocket(wsUri);
            websocket.onopen = function (evt) { onOpen(evt) };
            websocket.onclose = function (evt) { onClose(evt) };
            websocket.onmessage = function (evt) { onMessage(evt) };
            websocket.onerror = function (evt) { onError(evt) };
        }
        function onOpen(evt) {
            writeToScreen("CONNECTED");
            var messageInfo = { command: 'subscribe', content: 'r5001,reader1' };
            doSend(JSON.stringify(messageInfo));

            var messageInfoGetTags = { command: 'alltags', content: '' };
            doSend(JSON.stringify(messageInfoGetTags));
        }
        function onClose(evt) {
            writeToScreen("DISCONNECTED");
        }
        function onMessage(evt) {
            // writeToScreen('<span style="color: blue;">RESPONSE: ' + evt.data+'</span>');
            var tags = JSON.parse(evt.data);
            if (tags.length > 0) {
                for (var i = 0; i < tags.length; i++) {
                    var tag = tags[i];
                    writeToScreen("antennaID : " + tag.antennaID + " | epc : " + tag.epc + " | " + tag.Event);
                }
                writeToScreen("---------------------------------------------------------------------");
            }
            //websocket.close();
        }
        function onError(evt) {
            writeToScreen('<span style="color: red;">ERROR:</span> ' + evt.data);
        }
        function doSend(message) {
            writeToScreen("SENT: " + message);
            websocket.send(message);
        }
        // function writeToScreen(message) {
        //     var pre = document.createElement("p");
        //     pre.style.wordWrap = "break-word";
        //     pre.innerHTML = message;
        //     output.appendChild(pre);
        // }
        function writeToScreen(message, color) {
            message = ('<span style="color: '+ color +';">'+ message +'</span> ');
            var pre = document.createElement("p");
            pre.style.wordWrap = "break-word";
            pre.innerHTML = message;
            if(output.childNodes.length >= 30){
                for(i = output.childNodes.length -1; i >=0; i--){
                    output.removeChild(output.childNodes[i]);
                }
            }
            if(output.childNodes.length <= 0){
                output.appendChild(pre);
            }else{
                output.insertBefore(pre, output.childNodes[0]);
            }

        }

        window.addEventListener("load", init, false);
</script>

<h2>吐槽列表</h2>
<div id="output"></div>
</html>
  
  